status = warn
name= properties_configuration

# Give directory path where log files should get stored
property.basePath = ./reports/

# ConsoleAppender will print logs on console
#appender.console.type = Console
#appender.console.name = consoleLogger
#appender.console.target = SYSTEM_OUT
#appender.console.layout.type = PatternLayout

# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${basePath}ApacheLogger.log
appender.rolling.filePattern= ${basePath}app_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
#appender.rolling.layout.type = JSONLayout
appender.rolling.layout.pattern = %d{yyyy-MM-dd HH:mm:ss.SSS} %level [%c] - %msg%n
#appender.rolling.layout.pattern = {"debug_level":"%p","debug_timestamp":"%d{ISO8601}","debug_thread":"%t","debug_file":"%F", "debug_line":"%L","debug_message":"%m"}%n
appender.rolling.policies.type = Policies

# Rotate log file each day and keep 30 days worth
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = ${basePath}
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age = 30d

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = all
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
#rootLogger.appenderRef.console.ref = consoleLogger